
service: aoe2companion
app: aoe2companion
org: denniskeil10

frameworkVersion: ">=1.72.0"

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true

plugins:
  - serverless-webpack
  - serverless-offline

#plugins:
#  - serverless-domain-manager
#
#custom:
#  customDomain:
#    domainName: function.aoe2companion.com
#    basePath: dev

provider:
  name: aws
  environment:
    TWITTER_ACCESS_TOKEN: '1234abcd'
    TWITTER_ACCESS_TOKEN2: ${param:twitterAccessToken2}
    DATABASE_URL: ${param:DATABASE_URL}

stage: prod
region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#iamRoleStatements:
#  - Effect: "Allow"
#    Action:
#      - "s3:ListBucket"
#    Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#  - Effect: "Allow"
#    Action:
#      - "s3:PutObject"
#    Resource:
#      Fn::Join:
#        - ""
#        - - "arn:aws:s3:::"
#          - "Ref" : "ServerlessDeploymentBucket"
#          - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
#  mgz:
#    runtime: python3.8
#    handler: web/mgz.mgz
#    tags:
#      func: mgz
#    memorySize: 256
#    events:
#      - http:
#          path: api/mgz
#          method: get


#  hello3:
#    runtime: nodejs12.x
#    handler: src/hello3.hello3
#    tags:
#      func: hello3
#    memorySize: 256
#    events:
#      - http:
#          path: api/hello3
#          method: get
  leaderboard:
    runtime: nodejs12.x
    handler: src/leaderboard.leaderboard
    tags:
      func: leaderboard
    memorySize: 256
    events:
      - http:
          path: api/leaderboard
          method: get
          cors: true
#  leaderboardTable:
#    runtime: nodejs12.x
#    handler: src/leaderboard-table.leaderboardTable
#    tags:
#      func: leaderboardTable
#    memorySize: 256
#    events:
#      - http:
#          path: api/leaderboard-table
#          method: post
#          cors: true
  ingest:
    runtime: nodejs12.x
    handler: src/ingest.ingest
    tags:
      func: ingest
    memorySize: 256
    timeout: 600
    events:
      - http:
          path: ingest
          method: get
      - schedule: cron(0 * * * ? *)
#  match:
#    runtime: nodejs12.x
#    handler: src/match.match
#    tags:
#      func: match
#    memorySize: 256
#    timeout: 300
#    events:
#      - http:
#          path: match
#          method: get
#      - schedule:
#          rate: rate(2 minutes)
#      - schedule: cron(1/2 * * * ? *)




#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
